<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  
	<!-- 指定Spring的配置文件 -->  
	<!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->  
	<!-- 通过ContextLoaderListener的父类ContextLoader的第120行发现CONFIG_LOCATION_PARAM固定为contextConfigLocation -->
	<context-param>
	  <param-name>contextConfigLocation</param-name>
	  <param-value>classpath:config/xml/spring-core.xml</param-value>
	</context-param>
	
	<!-- 实例化Spring容器 -->  
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->  
	<listener>
	  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->  
    <listener>  
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>  
    </listener>  
    
    <listener>
      <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- 解决编码问题 -->  
	<filter>
	  <filter-name>characterEncoding</filter-name>
	  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	  <init-param>
	    <param-name>encoding</param-name>
	    <param-value>UTF-8</param-value>
	  </init-param>
	</filter>
	<filter-mapping>
	  <filter-name>characterEncoding</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Springmvc分发器 -->
	<servlet>
	  <servlet-name>springmvc</servlet-name>
	  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	  <init-param>
	    <param-name>contextConfigLocation</param-name>
	    <param-value>classpath:config/xml/spring-mvc.xml</param-value>
	  </init-param>
	  <load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
	  <servlet-name>springmvc</servlet-name>
	  <url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
	  <servlet-name>default</servlet-name>
	  <url-pattern>/assets/*</url-pattern>
	  <url-pattern>/index.html</url-pattern>
	</servlet-mapping>
  
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
	<!-- 这里filter-name必须对应shiro.xml中定义的<bean id="shiroFilter"/> -->  
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  
	<filter>  
	    <filter-name>shiroFilter</filter-name>  
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  
	    <init-param>  
	        <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->  
	        <param-name>targetFilterLifecycle</param-name>  
	        <param-value>true</param-value>  
	    </init-param>  
	</filter>  
	<filter-mapping>  
	    <filter-name>shiroFilter</filter-name>  
	    <url-pattern>/*</url-pattern>  
	</filter-mapping>  
 
 	<!-- 过滤器: 文章缓存过滤器/页面缓存过滤器 -->
	<filter>
		<filter-name>testCacheFilter</filter-name>
		<filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>
		<!-- 文章缓存 -->
		<init-param>
			<param-name>cacheName</param-name>
			<param-value>test</param-value>
		</init-param>
	</filter>
	<!-- URL过滤模式 -->
	<filter-mapping>
		<filter-name>testCacheFilter</filter-name>
		<url-pattern>/test/*</url-pattern>
	</filter-mapping>
	
  	<!-- 欢迎页面 -->
	<welcome-file-list>
	  <welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- 错误页面 -->
	<error-page>
	  <error-code>404</error-code>
	  <location>/404.jsp</location>
	</error-page>
  
</web-app>